const bigInt = require('big-integer');

// 512-bit primes
/*const EXPONENT = bigInt("12256971504525176577999115521306614075749098639988274452692554670619288210288814203087336665303501555493198422881032409199392946347224070978354126295353401");
const MODULUS = bigInt("121727957757863576101561860005285292626079113266451124223351027655156011238254177877652729098983576274837395085392103662934978533548660507677480253506715648449246069310428873797293036242698272731265802720055413141023411018398284944110799347717001885969188133010830020603318079626459849229187149790609728348667");
*/
// 3072-bit primes
const EXPONENT = bigInt("4536439045993165655799875671648629749865285005957721398992212981975145635146725168305918022501695380644063460612548155218025502173762071486316925497773405888560928485216086770445138768516451292175836986654475220257053087941593538794310050181554036749444305960242230853354892811669402591392974339808266837809102515358292025308962818098605230721351469881015593576351896661264963039742939413297884863321953176209728112929990395531840276170674095721666161368002116323565921880205030701967949061053334163196910825009651999903606517088081575546289913014084801228253291536501077680270373623690238333851317054011832103608976820705509288499216244815610047574524455582077189600690870359367470956504075598344195868285640557174290580131051499410534961557118833450472691966209207617080455866817076025224121924459080148488950575254572764537339513019044701097857761713924790447123775395469973562931673579841251519616727380600834112870898361");
const MODULUS = bigInt("25975647997323894928605298784049170709283348699927753800970400116676222425370220384471814883087120313699091899396731910149165465411878647810504616372917546983385513991211413764556252151693819546894098925615808624901146028951810426672207414068928199695732513394289906328822177392588819763820442571118327548300937382165383286575756774629081545178140640756408300185399123476436944969484613650635036202326904357962770719034683990513069490411431708430730273153282293152362893886563074038860182291848447768940091189854869847942173052330991381459023945251839133090921913249854479219224289982572999110712187894841816569600019830634480093180025231195663095982044494093110869223770760248427936015549969063669437470963992620076214917832958046753596614817374226136264339878153164008258862127501966307653774915582751694600882179653933316857453336778945870440858657694618852105138528934025361429815407054855130705200207115926909324093832064245808019075361783905844703211800449141310615391681792502286422122608225503309460998623145883993395433592840734240564859228481958083516619563529413166977187837017361307995818918302245612110855964564199674942698011175398404614395390130617941698131551330068466058680354297599551261724409483467617465446964679509057231960518059369939159447560802361274041847881527287310276077589772079278488367021541198183305688671180059946179789712990365069020916997093578386956671821732367655192822071134597924663737945728529487115532986077194862693931592616417468962220591311479551362867098223834031408639695220321787955893449781891692318849012200113730432203758314137772446165424041803614693479956553829826673575281177489259368696373109305038114934436626538988653742091902531601953566679715906201074232742347773664833111839043704972318839574123946181585840713539730587441799695555233199440613536059278073170267583156119768680111504504705213");

class GameBuffer {
	constructor(buffer) {
		this.buffer = buffer;
		this.offset = 0;
		this.decoder = new TextDecoder('utf8');
	}

	putByte(i) {
		this.buffer[this.offset++] = i;
	}

	putInt(i) {
		this.buffer[this.offset++] = (i >> 24) & 0xFF;
		this.buffer[this.offset++] = (i >> 16) & 0xFF;
		this.buffer[this.offset++] = (i >> 8) & 0xFF;
		this.buffer[this.offset++] = i & 0xFF;
	}

	putString(s) {
		for (let i = 0; i < s.length; i++)
			this.putByte(s.charCodeAt(i));

		// TODO: Is this ok or should I switch to c-strings (\0 terminated)
		this.putByte('\n');
	}

	putCredentials(user, pass) {
		for (let i = 0; i < user.length; i++)
			this.buffer[this.offset++] = user.charCodeAt(i);
		this.buffer[this.offset++] = '\0';
		
		for (let i = 0; i < pass.length; i++)
			this.buffer[this.offset++] = pass.charCodeAt(i);
		this.buffer[this.offset++] = '\0';
	}

	putBytes(src, srcPos, len) {
		for (let i = srcPos; i < len; i++)
			this.putByte(src[i]);
	}

	getUnsignedByte() {
		return this.buffer[this.offset++] & 0xFF;
	}

	getUnsignedShort() {
		return (this.getUnsignedByte() << 8) | this.getUnsignedByte();
	}

	getUnsignedInt() {
		return (this.getUnsignedShort() << 16) | this.getUnsignedShort();
	}

	getUnsignedLong() {
		let high = this.getUnsignedInt();
		let low = this.getUnsignedInt();
		return new Long(low, high, true);
	}

	getString(len = 0) {
		if (len < 0)
			return '';

		this.offset += len;
		if (this.offset > this.buffer.length)
			this.offset = this.buffer.length;

		return this.decoder.decode(Uint8Array.from(this.buffer.slice(this.offset-len, this.offset)));
	}

    getCryptoBuffer() {
        return (bigInt.fromArray(Array.from(this.buffer.slice(0, this.offset)), 256)).modPow(EXPONENT, MODULUS).toArray(256);
    }
}

module.exports = GameBuffer;
