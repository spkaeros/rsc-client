import bigInt from 'big-integer';

// let EXPONENT = bigInt('12256971504525176577999115521306614075749098639988274452692554670619288210288814203087336665303501555493198422881032409199392946347224070978354126295353401', 10);
// let MODULUS = bigInt('121727957757863576101561860005285292626079113266451124223351027655156011238254177877652729098983576274837395085392103662934978533548660507677480253506715648449246069310428873797293036242698272731265802720055413141023411018398284944110799347717001885969188133010830020603318079626459849229187149790609728348667', 10);
let EXPONENT = bigInt('58778699976184461502525193738213253649000149147835990136706041084440742975821', 10);
let MODULUS = bigInt('7162900525229798032761816791230527296329313291232324290237849263501208207972894053929065636522363163621000728841182238772712427862772219676577293600221789', 10);

function encryptBytes(arr) {
	return bigInt.fromArray(Array.from(arr), 256).modPow(EXPONENT, MODULUS).toArray(256).value;
}

export { encryptBytes as encryptBytes };
